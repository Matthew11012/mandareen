openapi: 3.0.3
info:
  title: Mandareen
  version: "0.1.0"
servers:
  - url: https://api.yourapp.com
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
    AssessmentQuestion:
      type: object
      properties:
        id:
          type: integer
        prompt:
          type: string
        options:
          type: array
          items:
            type: string
    AssessmentHistory:
      type: object
      properties:
        id:
          type: integer
        levelPlaced:
          type: integer
        takenAt:
          type: string
          format: date-time
    LessonSummary:
      type: object
      properties:
        id:
          type: integer
        level:
          type: integer
        title:
          type: string
        createdAt:
          type: string
          format: date-time
    LessonDetail:
      allOf:
        - $ref: '#/components/schemas/LessonSummary'
        - type: object
          properties:
            sections:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer }
                  sectionType: { type: string }
                  content: { type: object }
    WordInstanceRequest:
      type: object
      properties:
        sectionId: { type: integer }
        vocabId: { type: integer }
        startIndex: { type: integer }
        endIndex: { type: integer }
    Flashcard:
      type: object
      properties:
        id: { type: integer }
        vocabId: { type: integer }
        hanzi: { type: string }
        pinyin: { type: string }
        definition: { type: string }
        nextReview: { type: string, format: date }
    FlashcardReview:
      type: object
      properties:
        quality:
          type: integer
          minimum: 0
          maximum: 5
    Conversation:
      type: object
      properties:
        conversationId: { type: integer }
    Message:
      type: object
      properties:
        id: { type: integer }
        role:
          type: string
          enum: [user, ai]
        hanzi: { type: string }
        pinyin: { type: string }
        translation: { type: string }
        audioUrl: { type: string }
        createdAt:
          type: string
          format: date-time
    TranslateRequest:
      type: object
      properties:
        text: { type: string }
        target:
          type: string
          enum: [en]
paths:
  /api/auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users/me:
    get:
      summary: Get current user
      security:
        - bearerAuth: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/User'
                  - type: object
                    properties:
                      levelPlaced:
                        type: integer
  /api/assess/questions:
    get:
      summary: Fetch placement questions
      security:
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssessmentQuestion'
  /api/assess/submit:
    post:
      summary: Submit placement answers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  items:
                    type: object
                    properties:
                      questionId: { type: integer }
                      selectedOption: { type: string }
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  levelPlaced:
                    type: integer
  /api/assess/history:
    get:
      summary: Get past assessment results
      security:
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssessmentHistory'
  /api/lessons:
    get:
      summary: List lessons by level
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: level
          required: true
          schema:
            type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonSummary'
    post:
      summary: Generate an AI lesson
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                level: { type: integer }
      responses:
        202:
          content:
            application/json:
              schema:
                type: object
                properties:
                  lessonId: { type: integer }
                  status: { type: string }
  /api/lessons/{id}:
    get:
      summary: Get lesson detail
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonDetail'
  /api/word-instances:
    post:
      summary: Register a tapped word instance
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WordInstanceRequest'
      responses:
        201:
          content:
            application/json:
              schema:
                type: object
                properties:
                  instanceId: { type: integer }
  /api/flashcards:
    post:
      summary: Add a new flashcard
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vocabId: { type: integer }
                sourceInstanceId: { type: integer }
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flashcard'
  /api/flashcards/due:
    get:
      summary: List due flashcards
      security:
        - bearerAuth: []
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flashcard'
  /api/flashcards/{id}/review:
    post:
      summary: Review a flashcard
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlashcardReview'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flashcard'
  /api/conversations:
    post:
      summary: Start a new conversation
      security:
        - bearerAuth: []
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
  /api/conversations/{id}/messages:
    get:
      summary: Fetch messages in a conversation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Store a message
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Message'
                - type: object
                  properties:
                    conversationId: { type: integer }
      responses:
        201:
          content:
            application/json:
              schema:
                type: object
                properties:
                  messageId: { type: integer }
  /api/translate:
    post:
      summary: Translate text to English
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TranslateRequest'
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                properties:
                  translation: { type: string }
